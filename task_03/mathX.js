const MathX = (function() {
    //Проверяем, является ли число простым.
    //Функция будет возвращать true, если ей передается простое число. 
    //В противном случае мы получим false.
    function isPrimeNumber(i) {
        //Находим квадратный корень передаваемого функции числа. Это необходимо 
        //для оптимазации производительности цикла, поскольку так количество его 
        //итераций будет сокращено.
        const numSqrt = Math.sqrt(i)

        //Первое из простых чисел - 2, поэтому если переданное функции число равно 
        //этому значению, значит, оно простое.
        if (i === 2) {
            return true
        }
        
        for (let j = 2; j <= numSqrt; j++) {
            //Если передаваемое функции число делится без остатка на текущее значение 
            //счетчика цикла, при этом эти два значения не равны друг другу, значит, 
            //i не является простым числом.
            if (i % j === 0 && i !== j) {
                return false
            }
        }
        
        return true
    }

    return {
        //Вычисляем N-ое число в ряду Фибоначчи.
        nthFibonacci: function(n) {
            //Ряд Фибоначчи - это математический ряд чисел, который начинается 
            //с фиксированных чисел 0 и 1. Все последующие числа могут быть 
            //сгенерированы с использованием суммы двух последних чисел.
            
            //Вводим массив, для котором будем обновлять последние два из 
            //полученных нами чисел в ряду Фибоначчи.
            let [firstNumber, secondNumber] = [0, 1]
        
            //С помощью цикла перебираем целые числа, начиная с 1 и заканчивая 
            //передаваемым функцию N-ым числом (не включительно), 
            //для того, чтобы обновить числа в массиве.
            for (let i = 1; i < n; i++) [firstNumber, secondNumber] = [secondNumber, firstNumber + secondNumber]
        
            //Возвращаем первое число в массиве. Это и есть N-ое число в ряду 
            //Фибоначчи.
            return firstNumber
        },
        //Вычисляем все числа в ряду Фибоначчи до числа N
        sequenceFibonacci: function(n) {
            //Создаем массив, в котором будем хранить все полученные нами числа 
            //в ряду Фибоначчи. Сразу сохраняем здесь первое: 0.
            const sequenceFibonacci = [0]
            
            //С помощью цикла перебираем числа, начиная с 1 и заканчивая передаваемым 
            //функцию числом N (не включительно)
            for (let i = 1; i < n; i++) {
                i === 1 
                    ? sequenceFibonacci.push(1)
                    : sequenceFibonacci[i] = sequenceFibonacci[i - 2] + sequenceFibonacci[i - 1]
            }
        
            //Возращаем сохраненные в массиве значения. Это и есть числа в ряду 
            //Фибоначчи до числа N
            return sequenceFibonacci.toString()
        },
        //Вычисляем N-ое простое число
        nthPrimeNumber: function(n) {
            //Создаем массив, в котором будем хранить все полученные нами простые 
            //числа
            const primeNumbers = []
        
            //Определяем, является ли число простым. Проверка будут осуществляться 
            //пока количество чисел в массиве primeNumbers не достигнет размера, 
            //равного n
            for (let i = 2; primeNumbers.length < n; i++) {
                //Если число простое, добавляем его в массив primeNumbers
                if (isPrimeNumber(i)) primeNumbers.push(i)
            }
            
            //Возвращаем число из массива по индексу. Это и будет N-ое простое число
            return primeNumbers[n - 1]
        },
        //Вычисляем все простые числа до числа N
        primeNumbers: function(n) {
            //Создаем массив, в котором будем хранить все полученные нами простые 
            //числа
            const primeNumbers = []
            
            //Определяем, является ли число простым. Проверка будут осуществляться 
            //пока количество чисел в массиве primeNumbers не достигнет размера, 
            //равного n
            for (let i = 2; primeNumbers.length < n; i++) {
                //Если число простое, добавляем его в массив primeNumbers
                if (isPrimeNumber(i)) primeNumbers.push(i)
            }
            
            //Возвращаем сохраненные в массиве значения. Это и есть все простые числа 
            //до числа N.
            return primeNumbers.toString()
        }
    }
})()

//Проверяем работу функции для вычисления N-ого числа в ряду Фибоначчи
console.log(MathX.nthFibonacci(5)) //3

//Проверяем работу функции для вычисления всех числел в ряду Фибоначчи до числа N
console.log(MathX.sequenceFibonacci(5)) //0, 1, 1, 2, 3

//Проверяем работу функции для вычисления N-ого простого числа
console.log(MathX.nthPrimeNumber(5)) //11

//Проверяем работу функции для вычисления все простых чисел до числа N
console.log(MathX.primeNumbers(5)) //2, 3, 5, 7, 11