//Асинхронный код выполняется в фоновом режиме и не блокирует основной поток. 
//Он может быть написан разными способами, в том числе с помощью promise.

//Функция, которая принимает URL изображения и возвращает промис, который 
//разрешается с данными об изображении, когда оно загружено.
const loadImgData = url => {
    //Функция loadImgData создает и возвращает объект Promise.
    return new Promise(function(resolve, reject) {
        //Конструктор Image() создает новый экземпляр HTMLImageElement. Его 
        //функциональность эквивалентна document.createElement(“img”).
        const image = new Image()
        
        //Браузер позволяет отслеживать загрузку сторонних ресурсов, например, 
        //изображений. Для этого существуют два события: load – успешная 
        //загрузка, error – во время загрузки произошла ошибка.
        image.onload = () => {
            //Внутрь функции resolve() мы помещаем строку, которая затем будет 
            //доступна в then(). Это строка будет содержать данные об изображении.
            resolve(`Изображение загружено , pазмеры: ${image.width} x ${image.height}, src: ${image.src}`);
        }

        image.onerror = () => {
            //Внутрь функции reject() мы помещаем строку, которая затем будет 
            //доступна в catch(). Эта строка будет информировать об ошибке.
            reject(
                `Ошибка загрузки${
                    url 
                        //Если функции loadImgData был передан URL изображения
                        ? ' ' + url 
                        //Если функции loadImgData не был передан URL изображения
                        : ''
                }`
            );
        }

        image.src = url
    });
}

//Вызываем функцию loadImgData и передаем ей верный URL изображения.
loadImgData("https://stomanshop.ru/UserFiles/Image/new_folder/4242491.jpg")
    //Метод then() используют, чтобы выполнить код после успешного выполнения 
    //асинхронной операции.
    .then(
        value => {
            console.log(value);
        }
    )
    //Метод catch() используют, чтобы выполнить код в случае ошибки при 
    //выполнении асинхронной операции.
    .catch(
        value => {
            console.log(new Error(value));
        }
    );

//Вызываем функцию loadImgData и передаем ей неверный URL изображения.
loadImgData("https://stomanshop.ru/UserFiles/Image/new_folder/4242491")
    //Метод then() используют, чтобы выполнить код после успешного выполнения 
    //асинхронной операции.
    .then(
        value => {
            console.log(value);
        }
    )
    //Метод catch() используют, чтобы выполнить код в случае ошибки при 
    //выполнении асинхронной операции.
    .catch(
        value => {
            console.log(new Error(value));
        }
    );

//Вызываем функцию loadImgData и ничего ей не передаем.
loadImgData("")
    //Метод then() используют, чтобы выполнить код после успешного выполнения 
    //асинхронной операции.
    .then(
        value => {
            console.log(value);
        }
    )
    //Метод catch() используют, чтобы выполнить код в случае ошибки при 
    //выполнении асинхронной операции.
    .catch(
        value => {
            console.log(new Error(value));
        }
    );