//Связный список - структура данных, в которой несколько значений хранятся 
//линейно. Каждое значение содержит своё собственное значение узла, а также 
//содержит данные вместе со ссылкой на следующий узел в списке. Если 
//у каждого узла есть только один указатель на другой узел , то этот список 
//считается односвязным.

export class LinkedList {
  //Устанавливаем значение по умолчанию для head и tail.
  //head - начало односвязного списка, а tail - его конец.
  constructor(head = null, tail = null) {
      this.head = head;
      this.tail = tail;
  }

  //Используется для создания нового узла, где value - значение текущего узла, 
  //а next - ссылка на следующий.
  makeNode = (value) => {
    return {
      value,
      next: null
    }
  }

  //Используеется для добавления в односвязный список созданного узла.
  appendNode = (value) => {
    //Создаем новый узел односвязного списка и сохраняем его в node.
    const node = this.makeNode(value)

    //Если this.tail = null, то приравниваем this.head и this.tail к node.
    if(!this.tail) {
      return this.head = this.tail = node;
    }
    
    //В противном случае добавляем в конец списка созданный узел и перезаписываем 
    //значение this.tail.
    this.tail.next = node;
    this.tail = node;
  }

  //Используется для того, чтобы вывести в консоль полученный список.
  printList = () => {
    //Создаем массив, в котором будем сохранять значения узлов списка.
    const nodes = []
    //Создаем переменную, в которой будем хранить обновляемый в каждой 
    //итерации текущий узла.
    //Сразу сохраняем в перемнной первый узел в списке.
    let current = this.head;
    
    //Цикл будем работать пока текущий узел существует.
    while(current) {
      //Добавляем в конец массива значение текущего узла.
      nodes.push(current.value)
      //Обновляем текущий узел.
      current = current.next;
    }
    
    //Добавляем строку в начало массива.
    nodes.unshift('head')
    //Добавляем строку в конец списка.
    nodes.push('null')
    //Превращаем массив в строку, добавляя между его элементами ' -> '.
    const nodesStr = nodes.join(' -> ')

    //Выводим в консоль полученную строку.
    console.log(nodesStr)
  }

  //Удаляем все узлы односвязаного списка.
  clear() {
    this.head = this.tail = null
  }
}